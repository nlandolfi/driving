#!/usr/bin/env python

import sys
import cPickle as pickle
import time

import theano as th
import numpy as np

import world
import feature
import scenario

th.config.optimizer_verbose = True
th.config.allow_gc = False
th.config.optimizer = 'fast_compile'
th.config.mode = 'FAST_COMPILE'

epochs = 120

@feature.feature
def left_lane(t, x, u):
    return -(x[0]+0.13)**2

if __name__ == '__main__':
    name = sys.argv[1]
    if ':' in name:
        tokens = name.split(':')
        if tokens[0] == "s":
            name = tokens[1]
            defn = scenario.load('./scenarios/' + name)
            world = scenario.env_from(defn)
        elif tokens[0] == "ss":
            name = tokens[1]
            world = scenario.env_from(getattr(scenario, name))
    else:
        world = getattr(world, name)()
    w = world
    num_cars = len(w.cars)
    controls = [[] for i in range(num_cars)]
    states = [[] for i in range(num_cars)]
    beliefs = [[] for i in range(num_cars)]

    for t in range(epochs):
        print("t = ", t)
        for car in w.cars:
            car.control(0,0)
        for car, hist in zip(w.cars, controls):
            hist.append(car.u)
        for car in w.cars:
            car.move()
        for car, hist in zip(w.cars, states):
            hist.append(car.x)
        for car, hist in zip(w.cars, beliefs):
            if hasattr(car, 'log_ps'):
                hist.append(np.asarray([np.exp(log_p.get_value()) for log_p in car.log_ps]))
            if hasattr(car, 'hist'):
                car.set_hist(states)

    with open('data/%s-%d.pickle'%(name, int(time.time())), 'w') as f:
        pickle.dump((controls, states, beliefs), f)
